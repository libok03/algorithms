# 3 - 동작 방식 데이크스트라
# 출발점으로부터의 최단거리를 저장할 배열 d[V] 를 만들고, 출발 노드에는 0을, 출발점을 제외한 다른 노드들에는 매우 큰 값 INF를 채워 넣는다. (무한으로 간주될 수 있는 값을 의미함.)
# 현재 노드를 나타내는 변수 X 에 출발 노드의 번호를 저장한다.
# X 로부터 갈 수 있는 임의의 노드 Y에 대해, d[X] 에 두 정점 사이의 거리를 더한 값과 d[Y] 의 값을 비교한다.
# (INF와 비교할 경우 무조건 전자가 작다.)
# 만약 d[X] + 두 정점 사이의 거리의 값이 더 작다면, 즉 더 짧은 경로라면, d[Y]의 값을 이 값으로 갱신시킨다.
# X 의 모든 이웃 노드 Y 에 대해 이 작업을 수행한다.
# X 의 상태를 방문 완료로 바꾼다. 그러면 이제 더 이상 X 는 사용하지 않는다.
# 미방문 상태인 모든 노드들 중, 출발점으로부터의 거리가 제일 짧은 노드 하나를 골라서 그 노드를 X 에 저장한다.
# 도착 노드가 방문 완료 상태가 되거나, 혹은 더 이상 미방문 상태의 노드를 선택할 수 없을 때까지, 
# 3~7의 과정을 반복한다.
# 이 작업을 마친 뒤, 도착 노드에 저장된 값이 바로 X 로부터의 최단 거리이다. 만약 이 값이 INF라면, 중간에 길이 끊긴 것임을 의미한다.


def daykstra(start):
    # 거리 저장용
    dv=[INF] * (N+1)
    dv[start]=0
    # 우선순이 큐를 이용하여 (0,start)저장
    priority_queue = [(0,start)]
    # 우선순위 큐에서
    while priority_queue:
        # 가장 작은 수의 dist를 가지는 노드를 꺼내 와서
        curr_dist, curr_node = heapq.heappop(priority_queue)
        # 그 길이가 새로 만든 길이보다 작다면
        if curr_dist > dv[curr_node]:
            continue

        # 그 노드의 이어진 그래프에서
        for adj_node,adj_dist in graph[curr_node]:
            distance = curr_dist + adj_dist
            # 새로 구한 거리가 더 작다면
            if distance < dv[adj_node]:
                # 바꿔주고
                dv[adj_node] = distance
                # 우선 순위 큐에 집어넣기
                heapq.heappush(priority_queue,(distance,adj_node))
    return dv
